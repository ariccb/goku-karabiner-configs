{
    ;; tutorial: https://github.com/yqrashawn/GokuRakuJoudo/blob/master/tutorial.md

    ;; :!Ca is keycode :a and prefix a with !C

    ;; C  | left_command
    ;; T  | left_control
    ;; O  | left_option
    ;; S  | left_shift
    ;; F  | fn
    ;; Q  | right_command
    ;; W  | right_control
    ;; E  | right_option
    ;; R  | right_shift
    ;; P  | caps_lock
    ;; !! | command + control + optional + shift (hyper)

    ;; code for all this:
    ;; https://github.com/yqrashawn/GokuRakuJoudo/blob/b9b334a187379f9bc8182ad59e2cca2a1789e9c0/src/karabiner_configurator/keys.clj#L68

    ;; FROM modifiers
    ;; to understand better how modifiers work in karabiner
    ;; karabiner definition of mandatory and optional
    ;; https://karabiner-elements.pqrs.org/docs/json/complex-modifications-manipulator-definition/from/modifiers/

    ;;    | no modifier
    ;;                  input key maps to output key exactly
    ;;                  adding any modifier will cancel the event

    ;; !  | mandatory
    ;;                  specified modifier is removed in output (to event)
    ;;                  specified modifiers must be present for event to occur
    ;;                  adding any other modifier will cancel the event

    ;; #  | optional (single)
    ;;                  specified modifier is kept in output (to event)
    ;;                  one (or none) of the specified modifiers must be present
    ;;                  adding any other modifier will cancel the event

    ;; ## | optional any
    ;;                  specified modifier is removed in output (to event)
    ;;                  specified modifiers *must* be present for event to occur
    ;;                  adding any other modifier will add to output event
    ;;                  (what you typically expect, additional modifiers tacked on)
    ;;
    ;; need to prefix C T O S F with ! or #
    ;;


:profiles {
    :Default {
        :default true

        :sim     50     ;; simultaneous_threshold_milliseconds (def: 50)
                        ;; if keydown event for two different keys are pressed within :sim ms, the keypresses are considered simultaneous
        :delay   150    ;; to_delayed_action_delay_milliseconds (def: 500)
                        ;; after :delay ms, the key press is considered to be delayed (used for double-press macros)
        :alone   500    ;; to_if_alone_timeout_milliseconds (def: 1000)
                        ;; if keyup event comes within :alone ms from keydown, the key is not just pressed but held
        :held    500    ;; to_if_held_down_threshold_milliseconds (def: 500)
                        ;; key is fired twice when :held ms is elapsed (otherwise seen as a hold command) (TODO WHAT IS THIS??)
    }
} ;; profiles

; the default value is 250
:simlayer-threshold 500


;; layers are basically "hyper" keys
;; press this in combination with something else and depending on your rule, make things happen


;; simlayers are basically "hyper" keys
;; layers works too, but only recommended for non-typing keys like . or tab
;; to use more regular typing keys, use simlayers
:simlayers {
  :a-mode {:key :a}
} ;; simlayers

;; main contains multiple manipulators
:main [


    ;; each manipulator has a description and multiple rules

    ;;{:des "..."                               ;; -> description
    ;; :rules[
    ;;          [<from>  <to>  <conditions>]    ;; -> rule 1
    ;;          [<from>  <to>  <conditions>]    ;; -> rule 2
    ;; ]}

    ;; rule [:period ["period-mode" 1] nil {:afterup ["period-mode" 0] :alone :period}]
    ;;       |_____| |_______________| |_| |_________________________________________|
    ;;        <from>    <to>      <conditions>         <other options>
    ;;
    ;; karabiner docs: ;; https://pqrs.org/osx/karabiner/json.html#complex_modifications-manipulator-definition
    ;; <other options> includs ~to_if_alone~, ~to_if_held_down~,~to_after_key_up~, ~to_delayed_action~ and ~parameters~.
    ;;
                                    
    ;; (custom variables) & modifiers -> Advanced
    ;; https://github.com/yqrashawn/GokuRakuJoudo/blob/master/examples.org#custom-variable


  {:des "combos - aka simultaneus key presses to make shortcut"
         :rules [[:condi :colemakdh]
            [[:w :e] :!Cgrave_accent_and_tilde]     ; combo we keys --> undo (ctrl + z)
            [[:e :r] :!SCgrave_accent_and_tilde]    ; combo er keys --> redo (ctrl + shift + z)
            [[:grave_accent_and_tilde :z] :!Cz]     ; combo `z keys --> cut (ctrl + x)    
            [[:z :x] :!Cx]                          ; combo zx keys --> copy
            [[:x :c] :!Cv]                          ; combo xc keys --> paste
            [[:z :v] :!COSv]                        ; combo zv keys --> paste without formatting
            [[:i :o] :hyphen]                       ; combo io keys --> - hyphen / dash
            [[:grave_accent_and_tilde :c] :!Ca]     ; combo grave_accent_and_tilde and v keys --> select all
            [[:k :l] :equal_sign]                   ; combo kl keys --> = equals sign
            [[:comma :period] :!Shyphen]            ; combo ,. keys --> _ underscore
            [[:period :slash] :!Sslash]             ; combo ./ keys --> ? question mark
            [[:slash :right_shift] :!S1]            ; combo /shift keys --> ! exclamation mark
            [[:m :comma] :!Squote]                  ; combo m, keys --> " quote
            [[:9 :0] :!Tb]                          ; combo 90 keys --> hide/show terminal within vscode
            [[:8 :9 :0] :!STb]                      ; combo 890 keys--> new8 terminal within vscode
            ]}
            ;;


{:des "navigation layer"
        :rules [[:condi :a-mode] ; holding down the 'a' key on the keyboard enables you to use these navigation keys.
                                 ; while you are holding 'a', press the other key to activate the key

          [:##j :##left_arrow  ]     ; left              - press 'j' while holding 'a' 
          [:##k :##down_arrow  ]     ; down              - press 'k' while holding 'a'
          [:##i :##up_arrow    ]     ; up                - press 'i' while holding 'a'
          [:##l :##right_arrow ]     ; right             - press 'l' while holding 'a'
          [:##period :##page_down]   ; page down         - press '.' while holding 'a'          - makes cursor go to bottom of page
          [:##m :##page_up]          ; page up           - press 'm' while holding 'a'          - makes cursor go to top of page
          [:##comma :!COdown_arrow]  ; add cursor below  - press ',' while holding 'a' (vscode) - creates another cursor below your current cursor
          [:##u :##home]             ; home              - press 'u' while holding 'a'          - makes cursor go to the front of a line
          [:##o :##end]              ; end               - press 'o' while holding 'a'          - makes cursor go to the end of a line
          [:##s :left_option]        ; option modifier   - hold 's' key while holding 'a'       - allows you to add the 'option' modifier to your arrow keys, etc.
                                     ;                                                      ex... hold 'as' and press 'j' or 'l' to MOVE cursor by whole words instead
                                     ;                                                            of just one character at a time.   
                                     ;               
          [:##d :left_shift]         ; shift modifier    - hold 'd' key while holding 'a'       - allows you to add the 'shift' modifier to your arrow keys, etc.
                                     ;                                                      ex... hold 'asd' and press 'j' or 'l' to SELECT whole words instead
                                     ;                                                            of just one character at a time.                  
                                     ;
          [:##f :left_command]       ; command modifier - hold 'f' key while holding 'a'       - allows you to add the 'command' modifier to your arrow keys, etc.
                                     ;                                                      ex... hold 'as' and press 'j' or 'l' to SELECT whole words instead
                                     ;                                                            of just one character at a time.    
          [:##g :left_control]       ; control modifier - hold 'g' key while holding 'a'       - allows you to add the 'command' modifier to your arrow keys, etc.
                                     ;                                                      ex... hold 'as' and press 'j' or 'l' to SELECT whole words instead
                                     ;                                                            of just one character at a time. 
          [:##slash :!Sbackslash]

          ;; switch tabs in most apps
          ;; Cmd Shift [
          [:##v :!CSopen_bracket]
          ;; Cmd Shift ]
          [:##b :!CSclose_bracket]

          ;; VSCode ctrl cmd â†’
          ;; [:!Cleft_arrow :!CTleft_arrow]
          ;; [:!Cright_arrow :!CTright_arrow]

          ;; Quick Mouse handles
          [:down_arrow {:mkey {:y 1536}}]
          [:up_arrow {:mkey {:y -1536}}]
          [:left_arrow {:mkey {:x -1536}}]
          [:right_arrow {:mkey {:x 1536}}]

    ;;   ]
    ;; }
   
    ]}

    ] ;; main list

}